/*     make_tag_hits.c
 *     R.T. Jones    June 9 2000 
 *
 *     Sept. 4, 2003 -RTJ-
 *     Modified to operate on either Monte Carlo or real data.  In the case
 *     of Monte Carlo, correct any bugs in the encoding and save a copy of
 *     the original hits data in case someone needs to look at it.
 */


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <string.h>

#include <itypes.h> 
#include <iitypes.h>
#include <eventType.h>
#include <ntypes.h> 

#include <disData.h>
#include <pedestals.h>
#include <calibration.h> 
#include <makeHits.h>
#include <detector_params.h>
#include <triggerType.h>


int make_tagger_hits(itape_header_t *event, tagger_hits_t *p_tag, int maxhits)
{

  tdc_values_t *tdcs=NULL;
  tagger_hits_t *hits=NULL;
  int hindex[20];
  int i,j;

  if (event->trigger == TRIG_MC) {
    hits = data_getGroup(event,GROUP_TAGGER_HITS,0);
    if (hits == 0) {
      if (p_tag) {
        p_tag->nhits = 0;
      }
      return 0;
    }
    else if (event->latch < 0) {	 /* fix any Gradphi encoding bugs */
      tagger_hits_t *mchits;
      mchits = data_getGroup(event,GROUP_TAGGER_HITS,1);
      if (mchits == 0) {
     /* 
      * Back up the original group to subgroup index 1,
      * then overwrite original group with corrected data.
      * This ensures that the event record contains blessed
      * hits information, even if a copy is returned in p_tag.
      */
        int size = sizeof_tagger_hits_t(hits->nhits);
        mchits = data_addGroup(event,BUFSIZE,GROUP_TAGGER_HITS,1,size);
        memcpy(mchits,hits,size);
        /* no known bugs as of 4-9-2003 -rtj- */
      }
    }
    if (p_tag) {
      int size = sizeof_tagger_hits_t(hits->nhits);
      memcpy(p_tag,hits,size);
    }
    return 0;
  }
  if(p_tag==NULL){
    hits = malloc(sizeof_tagger_hits_t(maxhits));
  }
  else{
    hits = p_tag;
  }

  if(thisEvent != event->eventNo){
    if(p_timelist==NULL){
      p_timelist = malloc(sizeof_time_list_t(10000));
    }
    p_timelist->nelements = 0;
    thisEvent = event->eventNo;
  }

  tdcs = data_getGroup(event,GROUP_TAGGER_TDCS,0);
  if(tdcs == NULL){
    if(p_tag==NULL)
      free(hits);
#ifdef VERBOSE
    fprintf(stderr,"Warning in make_tagger_hits: ");
    fprintf(stderr,"No tagger TDC's\n");
#endif
    return(1);
  }

  hits->nhits = 0;
  for (i=0; i<20; hindex[i++]=0) {}

  for (i=0;i<tdcs->ntdc;i++) {
    int end=(tdcs->tdc[i].channel)/19;
    /* end=0 for left tagger counters, end=1 for right counters, 
     * and in the case of the tagger OR (tagger TDC channel 38),
     * end=2
     */
    int channel=(tdcs->tdc[i].channel)%19;
    /* so channel is the index of the bar.  Thus channel 2, end 1 is the 
     * phototube on the opposite end of the same scintillator bar as
     * channel 2, end 0. */
    if( (tdcs->tdc[i].le >= TMIN_TAG) &&
	(tdcs->tdc[i].le <= TMAX_TAG) && 
	(channel_status_tag[channel] == CHANNEL_STATUS_GOOD) && 
	(end < 2)) { /* this filters out the tagger OR */
      float value=tdcs->tdc[i].le+RANDOM;
      if (p_timelist->nelements >= MAX_TIME_LIST_LENGTH) {
        fprintf(stderr,"Error in make_tagger_hits: ");
        fprintf(stderr,"Time list max length exceeded!\n");
	break;
      }
      if (hindex[channel]) {
        int ihit = hindex[channel] - 1;
	if (hits->hit[ihit].times[end] == 0){
	    hits->hit[ihit].tindex[end] = p_timelist->nelements;
	}
       /* If we come across a second string of tdc values for a
        * phototube that appeared earlier in the tdc tables, I guess
        * we will orphan the former list and start a new one.
        * Maybe the tdc buffer was not flushed from the last event. -rtj-
        */
	else if (p_timelist->nelements >
                 hits->hit[ihit].tindex[end] + hits->hit[ihit].times[end]) {
	    hits->hit[ihit].tindex[end] = p_timelist->nelements;
	    hits->hit[ihit].times[end] = 0;
	}
        p_timelist->element[p_timelist->nelements].le =
	           TDC_1877_GAIN*(value - tag_tdc_offset[tdcs->tdc[i].channel]);
        p_timelist->element[p_timelist->nelements++].le += tag_t0_offset;
	hits->hit[ihit].times[end]++;
      }
      else if(hits->nhits < maxhits){ 
	hits->hit[hits->nhits].channel = channel;
	hits->hit[hits->nhits].energy[0] =
	hits->hit[hits->nhits].energy[1] = RADPHI_ELECTRON_BEAM_ENERGY
	           * tagger_fraction_by_channel[channel];
	hits->hit[hits->nhits].times[0] = 0;
	hits->hit[hits->nhits].times[1] = 0;
	hits->hit[hits->nhits].times[end] =1;
	hits->hit[hits->nhits].tindex[end] = p_timelist->nelements;
	p_timelist->element[p_timelist->nelements].le =
	           TDC_1877_GAIN*(value - tag_tdc_offset[tdcs->tdc[i].channel]); 
	p_timelist->element[p_timelist->nelements++].le += tag_t0_offset;
	hindex[channel] = ++(hits->nhits);
      }
      else {
#ifdef VERBOSE
	fprintf(stderr,"Warning in make_tagger_hits: ");
	fprintf(stderr,"buffer overflow at %d hits.\n",maxhits+1);
#endif
	break;
      }
    }
  }
  
  if(p_tag==NULL) {
    int size = sizeof_tagger_hits_t(hits->nhits);
    tagger_hits_t *tmp = data_addGroup(event,BUFSIZE,GROUP_TAGGER_HITS,0,size);
    memcpy(tmp,hits,size);
    free(hits); 
  }
  return(0);
}

int suppress_dead_tag_channels(tagger_hits_t *tag)
{
   int i;
   int nok=0;
   int nseen=tag->nhits;
   for (i=0; i<nseen; i++) {
     int channel=tag->hit[i].channel;
     if (channel_status_tag[channel] == CHANNEL_STATUS_GOOD){
       if (nok<i) {
         tag->hit[nok].channel = channel;
         tag->hit[nok].energy[0] = tag->hit[i].energy[0];
         tag->hit[nok].energy[1] = tag->hit[i].energy[1];
         tag->hit[nok].times[0] = tag->hit[i].times[0];
         tag->hit[nok].times[1] = tag->hit[i].times[1];
         tag->hit[nok].tindex[0] = tag->hit[i].tindex[0];
         tag->hit[nok].tindex[1] = tag->hit[i].tindex[1];
       }
       ++nok;
     }
   }
   return tag->nhits = nok;
}
